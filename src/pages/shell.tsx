import React from "react";
import Head from "next/head";
import styles from "@/styles/SortPagesStyles.module.scss";
import NumberBlock from "@/components/NumberBlock";

export const shellSort = (
  numArr: number[],
  step: number,
  setArray?: (arr: number[]) => void
) => {
  let currentStep = 0;
  let interval = Math.floor(numArr.length / 2);
  while (interval > 0 && currentStep < step) {
    for (let i = interval; i < numArr.length - interval + 1; i++) {
      let temp = numArr[i];
      let j;
      for (j = i; i >= interval && numArr[j - interval] < temp; j -= interval) {
        numArr[j] = numArr[j - interval];
      }
      numArr[j] = temp;
    }
    currentStep++;
    interval = Math.floor(interval / 2);
  }
  if (setArray) {
    setArray(numArr);
  }
  return numArr;
};

export default function Shell() {
  const sortStep = React.useRef(1);
  const [reset, setReset] = React.useState(0);
  const [blocked, setBlocked] = React.useState(false);
  const initialArray = [
    1, 4, 5, 13, 34, 23, 2, 5, 8, 9, 10, 59, 32, 15, 26, 28, 30, 54, 78, 35,
  ];
  let interval: NodeJS.Timer;
  const [array, setArray] = React.useState(initialArray.slice(0));

  const resetHandler = () => {
    sortStep.current = 1;
    setReset(reset + 1);
    setArray(initialArray.slice(0));
  };

  React.useEffect(() => {
    if (!interval) {
      interval = setInterval(() => {
        if (sortStep.current < Math.sqrt(Math.floor(array.length / 2))) {
          setBlocked(true);
          sortStep.current = sortStep.current + 1;
          shellSort(array.slice(0), sortStep.current, setArray);
        } else {
          setBlocked(false);
          clearInterval(interval);
        }
      }, 1000);
    }
  }, [reset]);

  return (
    <>
      <Head>
        <title>Shell</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.container}>
          <h1>Shell</h1>
          <div className={styles.diagram}>
            {array.map((item, index) => (
              <NumberBlock
                maxNumber={Math.max(...array)}
                height={item}
                key={index}
              />
            ))}
          </div>
          <button
            onClick={blocked ? undefined : resetHandler}
            className={blocked ? styles.blockedButton : styles.button}
          >
            Reset
          </button>
        </div>
      </main>
    </>
  );
}
